package week01.day03.singleton01;
/*
 * 작성일:2024-06-19
 * 작성자:황석현
 * 개요: 싱글톤 패턴 연습
 * 
 * 		싱글톤 패턴?
 * 		정의: 클래스의 인스턴스를 딱 하나만 생성하여 사용하는 패턴이다.
 * 			 (즉, 객체를 딱 하나만 생성하도록 하는 디자인 패턴)
 * 			 주로 특정 객체를 여러곳에서 공유해야할 때 사용한다. ex) DB Connection pool
 * 
 * 		특징: 메모리에 인스턴스 하나를 등록해 여러 쓰레드에서 동시에 하나의 객체를 사용할 수 있다.
 * 			 기본생성자를 private 접근제어자로 지정해서 직접 인스턴스를 생성할 수 없게하고, 사용자에게
 * 			 인스턴스를 전달하는 static 메서드가 있다. 
 * 			 static 이기 때문에 고정된 메모리 영역을 얻는다. 모든 클래스에서 사용할 수 있어서 공통된 객체를
 * 			 다수의 클라이언트에서 사용해야하는 상황에서 주로 사용된다.
 * 
 *		장점: ① 리소스 관리 및 접근 제어 :
 *			 	싱글톤 패턴은 특정 자원이나 서비스에 대한 접근을 제어하는데 유용하다.
 *			 	싱글톤은 한 번에 하나의 인스턴스만이 자원을 사용하도록 보장함으로써,
 *			 	리소스의 과도한 사용을 방지할 수 있다.
 *			 ② 메모리 효율성 :
 *			 	싱글톤은 필요한 시점에만 인스턴스를 생성하고, 이후에는 동일 인스턴스를 재사용한다.
 *			 	이는 메모리 사용을 줄이고 시스템의 전반적인 효율성을 높이는 데 도움 된다.
 *			 ③ 공유 상태의 일관성 :
 *			 	싱글톤 인스턴스는 애플리케이션에서 전역 상태를 유지한다.
 *				이는 여러 컴포넌트 간에 상태를 공유하고 일관성을 유지하는 데 유용하다.
 * 
 * 		단점: 동기화(여러곳에서 동시에 접근해서 생기는 문제)가 발생할 수 있어 잘 파악하고 설계해야된다.
 * 
 */

public class Main {

	public static void main(String[] args) {
		Singleton instance = Singleton.getInstance(1);
		Singleton instance2 = Singleton.getInstance(2);
		
		instance.printMsg();
		instance2.printMsg();
		
	}

}
